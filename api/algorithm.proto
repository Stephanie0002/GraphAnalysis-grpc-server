syntax = "proto3";

package algorithm;

// The greeting service definition.
service Algorithm {
  // Sends a greeting
  rpc ExecuteAlgorithm (AlgorithmRequest) returns (AlgorithmReply) {}
  rpc SparkQueryState (SparkQueryRequest) returns (SparkQueryReply) {}
  // rpc GetHDFSResult (GetResultRequest) returns (ResultReply) {}
}
service DataPipe{
  rpc Replay (ReplayRequest) returns (ReplayReply);
}
//The request message of replay containing start_timestamp and end_timestamp
message ReplayRequest {
  string dataset_name = 1;
  string topic_name = 2;
  int64 start_timestamp = 3;
  int64 end_timestamp = 4;
}
// The request message containing algorithm_id and args.
message AlgorithmRequest {
  int64 algorithm_id = 1;
  map<string,string> kwargs = 2;
  bool use_cache = 3;
}
//The reply message for the date on which the data is replaying right now
message ReplayReply {
  string result= 1;//成功返回'SUCCESS',失败返回'FAIL'
  string error_info=2;
}
// The response message of exe algorithm
message AlgorithmReply {
  string state = 1;
  int64 timestamp=2;
  string app_id = 3;
  string hdfs_path = 4;
  string message = 5;
}

// The request message containing app_id
message SparkQueryRequest {
  string app_id=1;
}

// The response message of the state of spark app
message SparkQueryReply {
  string state = 1;
  string finalStatus = 2;
}

//TODO: 加上结果请求
// The request message containing hdfs_path
// message GetResultRequest {
//   bytes hdfs_path=1;
// }

// // The response message of the result
// message ResultReply {
//   // string state = 1;
//   // string finalStatus = 2;
// }